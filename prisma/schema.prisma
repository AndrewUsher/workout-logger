// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Post {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  @@index([name])
  @@index([createdById])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  workouts      Workout[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Workout model
model Workout {
  id        Int        @id @default(autoincrement())
  userId    String
  date      DateTime   @default(now())
  duration  Int // Duration in minutes
  exercises Exercise[] @relation("WorkoutExercises")
  user      User       @relation(fields: [userId], references: [id])
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Log       Log[]
}

// Exercise model
model Exercise {
  id        Int       @id @default(autoincrement())
  name      String
  type      String // e.g., "Strength", "Cardio", etc.
  workouts  Workout[] @relation("WorkoutExercises")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Log       Log[]
}

// Log model
model Log {
  id         Int      @id @default(autoincrement())
  workoutId  Int
  exerciseId Int
  sets       Int // Number of sets performed
  reps       Int // Number of reps per set
  weight     Float // Weight used in the exercise
  notes      String? // Any additional notes
  workout    Workout  @relation(fields: [workoutId], references: [id])
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
